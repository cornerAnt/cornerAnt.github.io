[{"title":"Nginx-rtmp-module一次奇怪的错误","url":"http://www.antjustgo.com/2017/12/19/Nginx-rtmp-module一次奇怪的错误/","content":"<ul>\n<li>在安装时碰到了一次奇怪的错误,报了一堆匪夷所思的错误,折腾了一下午才解决,特此记录<br>These open issues may also help:<br>building nginx-full with healthcheck module giving<br>error  <a href=\"https://github.com/Homebrew/homebrew-nginx/issues/263\" target=\"_blank\" rel=\"noopener\">https://github.com/Homebrew/homebrew-nginx/issues/263</a></li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-d476f6cce7964c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>##1.找到本地下载的homebrew源码</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-658404803e008ab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\n\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open /usr/local/Homebrew/Library/Taps/homebrew/homebrew-nginx/Formula/</span><br></pre></td></tr></table></figure>\n<p>找到rtmp-nginx-module.rb文件打开</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://upload-images.jianshu.io/upload_images/1050644-0c2ca3a78428950f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></h2><p>##2.在github,homebrew找到了源码<br><a href=\"https://github.com/Homebrew/homebrew-nginx/blob/master/Formula/rtmp-nginx-module.rb\" target=\"_blank\" rel=\"noopener\">https://github.com/Homebrew/homebrew-nginx/blob/master/Formula/rtmp-nginx-module.rb</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-a1c65d1423eb4031.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>#对比发现是该模块的版本不一致问题,<br>本地是1.1.7.10,而github已经是1.1.7.11</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-015cf691c2ad2312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<p>修改文件代码如下</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-b923ad248322c8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Paste_Image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RtmpNginxModule &lt; Formula</span><br><span class=\"line\">  desc &quot;NGINX-based Media Streaming Server&quot;</span><br><span class=\"line\">  homepage &quot;https://github.com/sergey-dryabzhinsky/nginx-rtmp-module&quot;</span><br><span class=\"line\">  url &quot;https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/archive/v1.1.7.10.tar.gz&quot;</span><br><span class=\"line\">  sha256 &quot;0b32d34704d038485d93656dc43e970bbdd9c63bca7ff3b81ad941cde9144fc6&quot;</span><br><span class=\"line\">  version &quot;1.1.7.11-dev&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">  patch do</span><br><span class=\"line\">    url &quot;https://github.com/sergey-dryabzhinsky/nginx-rtmp-module/compare/v1.1.7.10...542106e.diff&quot;</span><br><span class=\"line\">    sha256 &quot;4bce367978d8dc2896432bc517f642626cc006256052957df37b94a6c9eb024b&quot;</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  bottle :unneeded</span><br><span class=\"line\"></span><br><span class=\"line\">  def install</span><br><span class=\"line\">    pkgshare.install Dir[&quot;*&quot;]</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>这样可以愉快的安装nginx-rtmp-module了</p>\n","categories":[],"tags":["iOS"]},{"title":"自定义tableView的cell分割线","url":"http://www.antjustgo.com/2017/04/15/自定义tableView的cell分割线/","content":"<ul>\n<li>系统默认情况下的cell的分割线,左边会预留一点的距离<br><img src=\"http://upload-images.jianshu.io/upload_images/1050644-4fc9e73d80626ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"cell.png\"></li>\n</ul>\n<ul>\n<li><p>我们往往会要求cell的分割线左边不预留距离,下面给出几个方法:</p>\n<ul>\n<li>1.自定义cell,在cell底部加上高度为1的View,设置View的背景颜色为所需分割线的颜色</li>\n<li><p>2.设置cell分割线偏移量</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  allows customization of the frame of cell    separators</span><br><span class=\"line\"> 设置分割线的偏移量,下面分别是iOS7和iOS8的属性</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIEdgeInsets</span> separatorInset</span><br><span class=\"line\"> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">7</span>_0) <span class=\"built_in\">UI_APPEARANCE_SELECTOR</span>; </span><br><span class=\"line\"> <span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIEdgeInsets</span> layoutMargins</span><br><span class=\"line\"> <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">8</span>_0);</span><br><span class=\"line\">  用法如下</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.tableView   setSeparatorInset:<span class=\"built_in\">UIEdgeInsetsMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.自定义cell,重写cell的setFrame方法,在高度计算前,让cell高度减1,这样就获得了高度为1的分割线,分割线的颜色,是它父控件的背景颜色</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     重写这个方法的目的：拦截cell的frame设置</span><br><span class=\"line\">   - (<span class=\"keyword\">void</span>)setFrame:(<span class=\"built_in\">CGRect</span>)frame</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    frame.size.height -= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">super</span> setFrame:frame];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义分割线设置完毕</p>\n</li>\n</ul>\n","categories":[],"tags":["iOS"]},{"title":"常用SQL","url":"http://www.antjustgo.com/2017/04/11/常用SQL语句/","content":"<p>/<em>简单约束</em>/<br>CREATE TABLE IF NOT EXISTS t_student(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER);<br>CREATE TABLE IF NOT EXISTS t_student(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, age INTEGER NOT NULL);<br>CREATE TABLE IF NOT EXISTS t_student(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE, age INTEGER);<br>CREATE TABLE IF NOT EXISTS t_student(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER DEFAULT 1);</p>\n<p>/<em>分页</em>/<br>SELECT * FROM t_student ORDER BY id ASC LIMIT 30, 10;</p>\n<p>/<em>排序</em>/<br>SELECT <em> FROM t_student WHERE score &gt; 50 ORDER BY age DESC;<br>SELECT </em> FROM t_student WHERE score &lt; 50 ORDER BY age ASC , score DESC;</p>\n<p>/<em>计量</em>/<br>SELECT COUNT(*) FROM t_student WHERE age &gt; 50;</p>\n<p>/<em>别名</em>/<br>SELECT name as myName, age as myAge, score as myScore FROM t_student;<br>SELECT name myName, age myAge, score myScore FROM t_student;<br>SELECT s.name myName, s.age myAge, s.score myScore FROM t_student s WHERE s.age &gt; 50;</p>\n<p>/<em>查询</em>/<br>SELECT name, age, score FROM t_student;<br>SELECT * FROM t_student;</p>\n<p>/<em>修改指定数据</em>/<br>UPDATE t_student SET name = ‘MM’ WHERE age = 10;<br>UPDATE t_student SET name = ‘WW’ WHERE age is 7;<br>UPDATE t_student SET name = ‘XXOO’ WHERE age &lt; 20;<br>UPDATE t_student SET name = ‘NNMM’ WHERE age &lt; 50 and score &gt; 10;</p>\n<p>/<em>删除数据</em>/<br>DELETE FROM t_student;</p>\n<p>/<em>更新数据</em>/<br>UPDATE t_student SET name = ‘LNJ’;</p>\n<p>/<em>插入数据</em>/</p>\n<p> INSERT INTO t_student(age, score, name) VALUES (‘28’, 100, ‘jonathan’);<br> INSERT INTO t_student(name, age) VALUES (‘lee’, ‘28’);<br> INSERT INTO t_student(score) VALUES (100);</p>\n<p>/<em>插入数据</em>/<br>INSERT INTO t_student(name, age, score) VALUES (‘lee’, ‘28’, 100);</p>\n<p>/<em>添加主键</em>/<br>CREATE TABLE IF NOT EXISTS t_student (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER, score REAL);<br>/<em>添加主键</em>/<br>CREATE TABLE IF NOT EXISTS t_student (id INTEGER, name TEXT, age INTEGER, score REAL, PRIMARY KEY(id));</p>\n<p>/<em>删除表</em>/<br>DROP TABLE IF EXISTS t_student;</p>\n<p>/<em>创建表</em>/<br>CREATE TABLE IF NOT EXISTS t_student(id INTEGER , name TEXT, age , score REAL);</p>\n","categories":[],"tags":["SQL"]},{"title":"Swift构造过程","url":"http://www.antjustgo.com/2017/04/10/Swift-构造过程/","content":"<h4 id=\"1-什么是构造过程\"><a href=\"#1-什么是构造过程\" class=\"headerlink\" title=\"1.什么是构造过程\"></a>1.什么是构造过程</h4><ul>\n<li>构造过程是使用类.结构体或者枚举类型一个实例的准备过程.在新的实例可用之前,必须经过这个过程,具体操作包括,设置实例中每个存储属性的初始值和执行其他的设置或者初始化工作.</li>\n<li>通过定义构造器来实现构造过程,这些构造器可以看做是用来创建特定类型新实例的特殊方法.与OC的构造器不同,Swift的构造器无需返回值,它们的主要任务是保证新实例在第一次使用前完成正确的初始化.</li>\n</ul>\n<p>####2.存储属性的初始值</p>\n<ul>\n<li><p>类和结构体在创建实例的时候,必须为所有的存储属性设置合适的初始值,存储属性的值不能处在一个未知的状态.这个初始值,可以在构造器中设置,也可以在定义属性时设置默认值.</p>\n<h5 id=\"2-1构造器\"><a href=\"#2-1构造器\" class=\"headerlink\" title=\"2.1构造器\"></a>2.1构造器</h5><ul>\n<li>构造器在创建某特定类的新实例时候调用.最简单形式类似无参数的实例方法,以关键字init命名.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init()&#123;</span><br><span class=\"line\">// 详细的构造过程</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>下面是一个保存温度的结构体,它有个存储温度的属性<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Fahrenheit&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"Git常见命令","url":"http://www.antjustgo.com/2017/04/07/Git超全命令备忘录/","content":"<ul>\n<li>一 常见命令</li>\n</ul>\n<blockquote>\n<ul>\n<li>1.初始化一个代码仓库<br>git init<ul>\n<li>2.如果使用git必须给git配置一个用户名和邮箱<br>给当前的git仓库配置一个用户名和邮箱<br>git config user.name “XXX”<br>git config user.email “XXX”<br>配置一个全局的用户名和邮箱<br>git config —global user.name “XXX”<br>git config —global user.email “XXX”</li>\n<li>3.初始化项目<br>touch main.m : 创建了main.m<br>git add main.m : 将新添加的文件或者修改的文件添加到暂存区<br>git commit -m “初始化项目”<br>git add . : 将所有没有被添加到暂存区或者代码仓库的文件添加到暂存区<br>注意:无论是新添加的文件或者修改的文件,都需要先通过add命令添加到暂存区中,之后再通过commit命令添加到本地仓库中</li>\n<li>4.查看文件的状态 git status<br>红色 : 新创建的文件或者被修改的文件,没有被添加到暂存区<br>绿色 : 表示文件在暂存区,但是没有被添加到本地仓库中</li>\n<li>5.给命令起别名<br>git config alias.st “status”<br>git config alias.ci “commit -m”<br>git config —global alias.st “status”</li>\n<li>6.git删除文件<br>git rm 文件名</li>\n<li>7.查看版本号<br>git log<br>git reflog<br>git config –global alias.lg “log –color –graph -<ul>\n<li>8.git的版本号是由sha1算法生成40位的哈希值</li>\n<li>9.版本回退<br>git reset —hard HEAD : 回退到当前的版本<br>git reset —hard HEAD^ :  回退到上一个版本<br>git reset —hard HEAD^^ : 回退到上上个版本<br>git reset —hard HEAD~100 : 回退到前100版本<br>git reset -hard 版本号(前5位)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<hr>\n<ul>\n<li><p>二.团队开发—共享版本库</p>\n<blockquote>\n<ul>\n<li>1.初始项目<br>git init —bare</li>\n<li>2.项目经理将共享版本库的内容先下载下来<br>git clone 地址</li>\n<li>3.添加需要忽略的文件<br>touch .gitignore<br>去github上搜索.gitignore-&gt;Objective-C<br>git add .gitignore<br>git commit -m “添加了需要忽略的文件”</li>\n<li>4.项目经理初始化项目<br>git commit -m “初始化项目”—&gt;提交到本地代码仓库</li>\n<li>5.将项目push远程仓库中<br>git push origin</li>\n<li>6.当源代码管理是使用GIT,并且在Xcode进行多人开发的操作<br>注意:当使用GIT,项目中用到了静态库就不需要通过命令行进行添加</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>三.版本备份<blockquote>\n<ul>\n<li>1.1.0版本开发完成,之后对1.0版本进行备份<br>git tag -a weibo1.0 -m “这个是1.0版本” : 给某一个版本打上标签<br>git tag : 查看所有的标签</li>\n<li>2.需要将1.0版本的标签,push到服务器<br>git push origin weibo1.0</li>\n<li>3.继续开发2.0版本</li>\n<li>4.发现1.0版本有bug,从标签里面clone 1.0版本,从标签创建一个fixbug分支,在分支中修复bug<br>git clone 共享版本库<br>git checkout weibo1.0(标签的名称)<br>git checkout -b weibo1.1fixbug(分支名称)</li>\n<li>5.修复后的版本上传AppStore/将1.0fixbug进行备份/将1.0fixbug版本和2.0版本进行合并\\<br>git tag -a weibo1.1 -m “这个是修复了1.0版本bug的1.1版本”<br>git tag<br>git push origin weibo1.1<br>将子分支中代码合并到主分支,pull—&gt;weibo1.1fixbug—&gt;push master—&gt;其它同事更新</li>\n<li>6.删除分支<br>git branch -r<br>git branch -r -d 分支名称</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>四.将代码托管到别人的服务器里面<blockquote>\n<ul>\n<li>1.Github<br>创建Github上的仓库<br>1) HTTPS : http + SSL<br>2) SSH : 公钥和私钥—&gt;settings—&gt;SSH Keys—&gt;生成公钥和私钥<br>删除代码仓库<br>可以给别人的代码提比较功能/对别人的代码重构:fork—&gt;pull Request<br>issues : 给框架作者提问题</li>\n<li>2.OSChina(Github上面项目不能私有化:交钱可以)<br>创建代码仓库<br>HTTPS/SSH<br>.gitignore不够完整 : 手动添加完成<br>如果项目想要多人开发:管理—&gt;成员管理—&gt;添加成员:让新人注册一个OSChina</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n","categories":[],"tags":["Git"]},{"title":"气泡通知的实现","url":"http://www.antjustgo.com/2017/03/16/气泡通知的实现/","content":"<p>RKNotificationHub是一个可以让UIView简单实现气泡的三方库</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-1df1100062af8c60.gif?imageMogr2/auto-orient/strip\" alt=\"687474703a2f2f692e696d6775722e636f6d2f537045324251762e676966.gif\"></p>\n<p>常用属性<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个气泡</span></span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)initWithView:(<span class=\"built_in\">UIView</span> *)view;</span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)initWithBarButtonItem:(<span class=\"built_in\">UIBarButtonItem</span> *)barButtonItem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//%%% adjustment methods</span></span><br><span class=\"line\"><span class=\"comment\">// 气泡初始条数</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setView:(<span class=\"built_in\">UIView</span> *)view andCount:(<span class=\"built_in\">NSUInteger</span>)startCount;</span><br><span class=\"line\"> <span class=\"comment\">// 设置气泡的尺寸</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setCircleAtFrame:(<span class=\"built_in\">CGRect</span>)frame;</span><br><span class=\"line\"><span class=\"comment\">//  设置气泡颜色,和通知个数的颜色</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)setCircleColor:(<span class=\"built_in\">UIColor</span>*)circleColor labelColor:(<span class=\"built_in\">UIColor</span>*)labelColor;</span><br><span class=\"line\"><span class=\"comment\">// 移动气泡的指定位置</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)moveCircleByX:(<span class=\"built_in\">CGFloat</span>)x Y:(<span class=\"built_in\">CGFloat</span>)y;</span><br><span class=\"line\"><span class=\"comment\">// 设置缩放比例,中心点不变</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)scaleCircleSizeBy:(<span class=\"built_in\">CGFloat</span>)scale;</span><br><span class=\"line\"><span class=\"comment\">// 设置气泡提示文字的字体</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIFont</span> *countLabelFont;</span><br></pre></td></tr></table></figure></p>\n<p>下面是设置气泡提示数目的<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//%%% changing the count</span></span><br><span class=\"line\"><span class=\"comment\">// 增加一条</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)increment;</span><br><span class=\"line\"><span class=\"comment\">// 增加N条</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)incrementBy:(<span class=\"built_in\">NSUInteger</span>)amount;</span><br><span class=\"line\"><span class=\"comment\">// 删除一条</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)decrement;</span><br><span class=\"line\"><span class=\"comment\">// 增加N条</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)decrementBy:(<span class=\"built_in\">NSUInteger</span>)amount;</span><br><span class=\"line\"><span class=\"comment\">// 当前条数</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">NSUInteger</span> count;</span><br></pre></td></tr></table></figure></p>\n<p>设置状态<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//%%% hiding / showing the count</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)hideCount;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)showCount;</span><br></pre></td></tr></table></figure></p>\n<p>设置动画类型<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//%%% animations</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)pop;  <span class=\"comment\">// 弹出</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)blink; <span class=\"comment\">// 眨眼</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)bump; <span class=\"comment\">// 跳动</span></span><br></pre></td></tr></table></figure></p>\n<p>由于比较简单,Demo就不写了,可以指定任何UIView的提示,默认显示右上角</p>\n","categories":[],"tags":["iOS"]},{"title":"iOS资源收集","url":"http://www.antjustgo.com/2017/03/08/第三方资源收集/","content":"<ul>\n<li>水波浪圆形进度控件，采用 CAShapeLayer，CADisplayLink 波浪动画，简单，流畅<br><a href=\"https://github.com/12207480/TYWaterWaveView\" target=\"_blank\" rel=\"noopener\">https://github.com/12207480/TYWaterWaveView</a></li>\n<li>类似QQ的cell侧滑多个选择按钮的控件,支持iOS6+<br><a href=\"https://github.com/CEWendel/SWTableViewCell\" target=\"_blank\" rel=\"noopener\">https://github.com/CEWendel/SWTableViewCell</a></li>\n<li>iOS 股票的K线图 分时图<br><a href=\"https://github.com/chenyk0317/YKLineChartView\" target=\"_blank\" rel=\"noopener\">https://github.com/chenyk0317/YKLineChartView</a></li>\n<li>聊天界面 8000star值得拥有<br><a href=\"https://github.com/jessesquires/JSQMessagesViewController\" target=\"_blank\" rel=\"noopener\">https://github.com/jessesquires/JSQMessagesViewController</a></li>\n<li>一款可以支持滤镜,自定义界面的相机<br><a href=\"https://github.com/tdginternet/TGCameraViewController\" target=\"_blank\" rel=\"noopener\">https://github.com/tdginternet/TGCameraViewController</a></li>\n<li>仿添加好友弹出视图<br><a href=\"https://github.com/liufengting/FTPopOverMenu\" target=\"_blank\" rel=\"noopener\">https://github.com/liufengting/FTPopOverMenu</a></li>\n<li>实现本地与远程文本文件内容联动的微框架<br><a href=\"https://github.com/krzysztofzablocki/KZFileWatchers\" target=\"_blank\" rel=\"noopener\">https://github.com/krzysztofzablocki/KZFileWatchers</a></li>\n<li>导航栏渐变<br><a href=\"https://github.com/ltebean/LTNavigationBar\" target=\"_blank\" rel=\"noopener\">https://github.com/ltebean/LTNavigationBar</a></li>\n<li>直播第三方框架<br><a href=\"https://github.com/LaiFengiOS/LFLiveKit\" target=\"_blank\" rel=\"noopener\">https://github.com/LaiFengiOS/LFLiveKit</a></li>\n</ul>\n","categories":[],"tags":["资源"]},{"title":"iOS开发的常用宏","url":"http://www.antjustgo.com/2016/11/11/iOS开发中常用的宏/","content":"<p>快速开发中常用的宏<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifndef MacroDefinition_h</span></span><br><span class=\"line\"><span class=\"meta\">#define MacroDefinition_h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-------------------获取设备大小-------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//NavBar高度</span></span><br><span class=\"line\"><span class=\"meta\">#define NavigationBar_HEIGHT 44</span></span><br><span class=\"line\"><span class=\"comment\">//获取屏幕 宽度、高度</span></span><br><span class=\"line\"><span class=\"meta\">#define SCREEN_WIDTH ([UIScreen mainScreen].bounds.size.width)</span></span><br><span class=\"line\"><span class=\"meta\">#define SCREEN_HEIGHT ([UIScreen mainScreen].bounds.size.height)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-------------------获取设备大小-------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-------------------打印日志-------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//DEBUG  模式下打印日志,当前行</span></span><br><span class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#   define DLog(fmt, ...) NSLog((@<span class=\"meta-string\">\"%s [Line %d] \"</span> fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#   define DLog(...)</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重写NSLog,Debug模式下打印日志和当前行数</span></span><br><span class=\"line\"><span class=\"meta\">#if DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#define NSLog(FORMAT, ...) fprintf(stderr,<span class=\"meta-string\">\"\\nfunction:%s line:%d content:%s\\n\"</span>, __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define NSLog(FORMAT, ...) nil</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//DEBUG  模式下打印日志,当前行 并弹出一个警告</span></span><br><span class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#   define ULog(fmt, ...)  &#123; UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@<span class=\"meta-string\">\"%s\\n [Line %d] \"</span>, __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@<span class=\"meta-string\">\"Ok\"</span> otherButtonTitles:nil]; [alert show]; &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#   define ULog(...)</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define ITTDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTLOGLEVEL_INFO     10</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTLOGLEVEL_WARNING  3</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTLOGLEVEL_ERROR    1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifndef ITTMAXLOGLEVEL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTMAXLOGLEVEL ITTLOGLEVEL_INFO</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTMAXLOGLEVEL ITTLOGLEVEL_ERROR</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The general purpose logger. This ignores logging levels.</span></span><br><span class=\"line\"><span class=\"meta\">#ifdef ITTDEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTDPRINT(xx, ...)  NSLog(@<span class=\"meta-string\">\"%s(%d): \"</span> xx, __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTDPRINT(xx, ...)  ((void)0)</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Prints the current method's name.</span></span><br><span class=\"line\"><span class=\"meta\">#define ITTDPRINTMETHODNAME() ITTDPRINT(@<span class=\"meta-string\">\"%s\"</span>, __PRETTY_FUNCTION__)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Log-level based logging macros.</span></span><br><span class=\"line\"><span class=\"meta\">#if ITTLOGLEVEL_ERROR <span class=\"meta-string\">&lt;= ITTMAXLOGLEVEL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDERROR(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDERROR(xx, ...)  ((void)0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#if ITTLOGLEVEL_WARNING &lt;= ITTMAXLOGLEVEL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDWARNING(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDWARNING(xx, ...)  ((void)0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#if ITTLOGLEVEL_INFO &lt;= ITTMAXLOGLEVEL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDINFO(xx, ...)  ITTDPRINT(xx, ##__VA_ARGS__)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDINFO(xx, ...)  ((void)0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#ifdef ITTDEBUG</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDCONDITIONLOG(condition, xx, ...) &#123; if ((condition)) &#123; \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">ITTDPRINT(xx, ##__VA_ARGS__); \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">&#125; \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">&#125; ((void)0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTDCONDITIONLOG(condition, xx, ...) ((void)0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ITTAssert(condition, ...)                                       \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">do &#123;                                                                      \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">if (!(condition)) &#123;                                                     \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">[[NSAssertionHandler currentHandler]                                  \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">handleFailureInFunction:[NSString stringWithUTF8String:__PRETTY_FUNCTION__] \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">file:[NSString stringWithUTF8String:__FILE__]  \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">lineNumber:__LINE__                                  \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">description:__VA_ARGS__];                             \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">&#125;                                                                       \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">&#125; while(0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//---------------------打印日志--------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------系统----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//获取系统版本</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define CurrentSystemVersion [[UIDevice currentDevice] systemVersion]</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//获取当前语言</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//判断是否 Retina屏、设备是否%fhone 5、是否是iPad</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define isRetina ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//判断是真机还是模拟器</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#if TARGET_OS_IPHONE</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//iPhone Device</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#if TARGET_IPHONE_SIMULATOR</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//iPhone Simulator</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//检查系统版本</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------系统----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------内存----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//使用ARC和不使用ARC</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#if __has_feature(objc_arc)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//compiling with ARC</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">// compiling without ARC</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#endif</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#pragma mark - common functions</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define RELEASE_SAFELY(__POINTER) &#123; [__POINTER release]; __POINTER = nil; &#125;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//释放一个对象</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SAFE_DELETE(P) if(P) &#123; [P release], P = nil; &#125;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define SAFE_RELEASE(x) [x release];x=nil</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------内存----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------图片----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//读取本地图片</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define LOADIMAGE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//定义UIImage对象</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//定义UIImage对象</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define ImageNamed(_pointer) [UIImage imageNamed:[UIUtil imageName:_pointer]]</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//建议使用前两种宏定义,性能高于后者</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------图片----------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">//----------------------颜色类---------------------------</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">// rgb颜色转换（16进制-&gt;</span>10进制）</span></span><br><span class=\"line\"><span class=\"meta\">#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带有RGBA的颜色设置</span></span><br><span class=\"line\"><span class=\"meta\">#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取RGB颜色</span></span><br><span class=\"line\"><span class=\"meta\">#define RGBA(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]</span></span><br><span class=\"line\"><span class=\"meta\">#define RGB(r,g,b) RGBA(r,g,b,1.0f)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//背景色</span></span><br><span class=\"line\"><span class=\"meta\">#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//清除背景色</span></span><br><span class=\"line\"><span class=\"meta\">#define CLEARCOLOR [UIColor clearColor]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark - color functions</span></span><br><span class=\"line\"><span class=\"meta\">#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</span></span><br><span class=\"line\"><span class=\"meta\">#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------------------颜色类--------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------------------其他----------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方正黑体简体字体定义</span></span><br><span class=\"line\"><span class=\"meta\">#define FONT(F) [UIFont fontWithName:@<span class=\"meta-string\">\"FZHTJW--GB1-0\"</span> size:F]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个API</span></span><br><span class=\"line\"><span class=\"meta\">#define APIURL                @<span class=\"meta-string\">\"http://xxxxx/\"</span></span></span><br><span class=\"line\"><span class=\"comment\">//登陆API</span></span><br><span class=\"line\"><span class=\"meta\">#define APILogin              [APIURL stringByAppendingString:@<span class=\"meta-string\">\"Login\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置View的tag属性</span></span><br><span class=\"line\"><span class=\"meta\">#define VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]</span></span><br><span class=\"line\"><span class=\"comment\">//程序的本地化,引用国际化的文件</span></span><br><span class=\"line\"><span class=\"meta\">#define MyLocal(x, ...) NSLocalizedString(x, nil)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//G－C－D</span></span><br><span class=\"line\"><span class=\"meta\">#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</span></span><br><span class=\"line\"><span class=\"meta\">#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NSUserDefaults 实例化</span></span><br><span class=\"line\"><span class=\"meta\">#define USER_DEFAULT [NSUserDefaults standardUserDefaults]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由角度获取弧度 有弧度获取角度</span></span><br><span class=\"line\"><span class=\"meta\">#define degreesToRadian(x) (M_PI * (x) / 180.0)</span></span><br><span class=\"line\"><span class=\"meta\">#define radianToDegrees(radian) (radian*180.0)/(M_PI)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单例化一个类</span></span><br><span class=\"line\"><span class=\"meta\">#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \\</span></span><br><span class=\"line\">\\</span><br><span class=\"line\"><span class=\"keyword\">static</span> classname *shared<span class=\"meta\">##classname = nil; \\</span></span><br><span class=\"line\">\\</span><br><span class=\"line\">+ (classname *)shared<span class=\"meta\">##classname \\</span></span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\"><span class=\"keyword\">@synchronized</span>(<span class=\"keyword\">self</span>) \\</span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shared<span class=\"meta\">##classname == nil) \\</span></span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\">shared<span class=\"meta\">##classname = [[self alloc] init]; \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">\\</span><br><span class=\"line\"><span class=\"keyword\">return</span> shared<span class=\"meta\">##classname; \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">\\</span><br><span class=\"line\">+ (<span class=\"keyword\">id</span>)allocWithZone:(<span class=\"built_in\">NSZone</span> *)zone \\</span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\"><span class=\"keyword\">@synchronized</span>(<span class=\"keyword\">self</span>) \\</span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shared<span class=\"meta\">##classname == nil) \\</span></span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\">shared<span class=\"meta\">##classname = [super allocWithZone:zone]; \\</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> shared<span class=\"meta\">##classname; \\</span></span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">\\</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">nil</span>; \\</span><br><span class=\"line\">&#125; \\</span><br><span class=\"line\">\\</span><br><span class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone \\</span><br><span class=\"line\">&#123; \\</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">self</span>; \\</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["iOS"]},{"title":"Swift小技巧","url":"http://www.antjustgo.com/2016/10/19/Swift小技巧/","content":"<p>Swift简洁,高效的小技巧</p>\n<ul>\n<li><p>1.单例的正确姿势,相比OC,Swift的单例简洁到极致</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySingletonClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> sharedInstance = <span class=\"type\">MySingletonClass</span>() </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.defer语句会推迟包含这个命令的代码执行，直到当前范围终止。下面语句2执行完毕就会执行语句1</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferExample</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\"><span class=\"keyword\">defer</span> &#123; <span class=\"built_in\">print</span>(<span class=\"string\">\"语句1\"</span>) </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"语句2\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.NSStringFromClass 替代方案,XXX是类,可以根据类获取字符串<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span>(<span class=\"type\">XXX</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-4.使用泛型和</p>\n","categories":[],"tags":["Swift"]},{"title":"Swift高仿项目,堆糖","url":"http://www.antjustgo.com/2016/10/13/Swift高仿项目,堆糖/","content":"<p>项目地址:<a href=\"https://github.com/cornerAnt/PilesSugar\" target=\"_blank\" rel=\"noopener\">https://github.com/cornerAnt/PilesSugar</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-44cf410479a65f52.gif?imageMogr2/auto-orient/strip\" alt=\"1.gif\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-4be9238d42684bf5.gif?imageMogr2/auto-orient/strip\" alt=\"2.gif\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-4cbc00006017cf1d.gif?imageMogr2/auto-orient/strip\" alt=\"3.gif\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-ef96d08519901e4f.gif?imageMogr2/auto-orient/strip\" alt=\"4.gif\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-5c29461857ebc237.gif?imageMogr2/auto-orient/strip\" alt=\"5.gif\"></p>\n<p>欢迎批评,交流</p>\n","categories":[],"tags":["Swift"]},{"title":"Swift-如何配置DEBUG打印函数","url":"http://www.antjustgo.com/2016/09/13/Swift-如何配置DEBUG打印函数/","content":"<ul>\n<li><p>开发中,往往要打印一些信息,方便调试,OC中,我们会常常会这么写</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#ifdef DEBUG</span></span><br><span class=\"line\"> <span class=\"meta\">#define DEBUGLOG(...) NSLog(__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然而Swift中,并没有宏帮助我们失信DEBUG,WTF,宏没有了!,下面看如何让Swift拥有DEBUG打印功能</p>\n<ul>\n<li>1.Build Settings -&gt;搜索 Swift compiler -&gt; OTHER_SWIFT_FLAGS = -D DEBUG<br><img src=\"http://upload-images.jianshu.io/upload_images/1050644-2d50dbbb3b34fb2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Snip20151207_1.png\"></li>\n<li>2.设置DEBUG函数<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DEBUGLOG</span>&lt;T&gt;<span class=\"params\">(message: T, file: NSString = <span class=\"keyword\">__FILE__</span>, method: String = <span class=\"keyword\">__FUNCTION__</span>, line: Int = <span class=\"keyword\">__LINE__</span>)</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #<span class=\"keyword\">if</span> <span class=\"type\">DEBUG</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(method)[\\(line)]: \\(message)\"</span>)</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">该打印函数会打印文件名,方法名,行号</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置好后就可以愉快的进行调试输出了!</p>\n</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"Swift-闭包","url":"http://www.antjustgo.com/2016/08/13/Swift-闭包/","content":"<p>闭包是自包含的函数代码块,可以被传递和使用,类似OC中的代码块。闭包可以捕获和存储其所在上下文中任意的常量和变量的引用，就是所谓的闭合并包裹着这些常量和变量。</p>\n<ul>\n<li>全局函数和嵌套函数也是特殊的闭包，闭包常见的有三种<ul>\n<li>1.全局函数是有名字，不能捕获任何值的闭包</li>\n<li>2.嵌套函数是有名字，可以捕获封闭函数域范围内的闭包</li>\n<li>3.闭包表达式没有名字，可以捕获对应上下文中变量或者常量。</li>\n</ul>\n</li>\n<li>闭包可以通过语法优化，拥有一个简洁的风格<ul>\n<li>1.利用上下文推断参数和返回值类型</li>\n<li>2.隐式返回单表达式闭包，可以省略return关键字</li>\n<li>3.参数名称缩写</li>\n<li>4.尾随闭包语法</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>##1.闭包表达式<br>闭包表达式是一种利用简洁语法构建内联包的方式。下面通过多次迭代优化来简化闭包表达式</p>\n<p>#####1.1sort方法<br>Swift的sort方法可以用来怼数组进行排序，返回一个与原大小数组大小相同，正确排序的新数组，原数组不会被修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let names = [&quot;zhangsang&quot;,&quot;lisi&quot;,&quot;wangwu&quot;,&quot;zhaoliu&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">// sort方法接受一个闭包，该闭包函数需要传入与数组元素相同的连个值，根据布尔值，来选择排序顺序.</span><br><span class=\"line\">// 类型为(String, String) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">// 写一个符合该类型的闭包函数，按照逆序排列数组</span><br><span class=\"line\">func backwards(s1: String, s2: String) -&gt; Bool&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return s1 &gt; s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var reversed = names.sort(backwards)</span><br><span class=\"line\">// 排序完的数组如下</span><br><span class=\"line\">[&quot;zhaoliu&quot;，&quot;zhangsang&quot;,&quot;wangwu&quot;,&quot;lisi&quot;]</span><br></pre></td></tr></table></figure>\n<p>####1.2闭包表达式语法<br>闭包表达式的一般形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;(参数)-&gt; 返回值 in</span><br><span class=\"line\">\t 闭包语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>闭包表达式的参数</p>\n<ul>\n<li><p>常量、变量、inout类型，不可提供默认值</p>\n</li>\n<li><p>可在参数列表的后面使用可变参数</p>\n</li>\n<li><p>元祖可以作为参数和返回值</p>\n</li>\n<li><p>内联闭包参数和返回值类型声明与backwards函数类型声明相同，两种都可以写为(s1: String, s2: String) -&gt; Bool</p>\n</li>\n<li><p>内联闭包表达式中，函数和返回值都写在大括号内</p>\n</li>\n<li><p>函数的关键部分通过in引入。in前面是闭包的参数和返回值，in后面为闭包函数体<br>-</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>(&#123;(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上述代码完全可以写在一行，这样闭包也就变成了内联闭包</p>\n<p>####1.3根据上下文推断类型</p>\n<ul>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（&#123;(s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125;）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>该闭包是sort方法的参数，由于该方法的参数必然为（String,String）-&gt;Bool 类型的函数，这就意味着闭包的参数和返回值不需要特别指出，Swift可以自动推断出正确的类型。那么，参数和返回值可以继续简写</p>\n</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（&#123;s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125;）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过内联表达式构造的闭包作为参数传递给函数或者方法时，都可以正确的推倒出闭包的参数和返回值</p>\n</li>\n<li><p>当闭包作为函数或者方法的参数时，不需要完整格式的闭包表达</p>\n</li>\n<li><p>为了代码的可读性，适度的选择简写</p>\n</li>\n</ul>\n<p>####1.4单表达式闭包隐式返回</p>\n<ul>\n<li>单行表达式闭包可以省略return来隐式地返回当行表达式的结果，sort方法的第二个参数表示，闭包必须返回一个Bool值，由于该闭包只有一个单一表达式 s1 &gt; s2,而且返回Bool类型，所以下面的简写不会有歧义：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（&#123;s1, s2 <span class=\"keyword\">in</span>  s1 &gt; s2 &#125;）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####1.5参数名称缩写</p>\n<ul>\n<li><p>Swift系统为内联闭包提供参数缩写功能，通过$0,$1,$2来顺序调用闭包的参数</p>\n</li>\n<li><p>通过参数名称缩写，可以在闭包参数列表中，省略相应参数的定义</p>\n</li>\n<li><p>通过参数名称缩写，相应参数的类型会进行类型推断</p>\n</li>\n<li><p>in也能被省略</p>\n</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（&#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####1.6运算函数</p>\n<ul>\n<li>Swift的Sring类型，(&gt;)接受两个String类型的参数，返回Bool值。这样的类型刚好匹配Sort方法所需的参数类型，因此可以进一步简写</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（&gt;）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p>##2.尾随闭包</p>\n<ul>\n<li><p>当一个很长的闭包表达式作为最后一个参数传递个函数时，可以使用尾随闭包来增强函数的可读性</p>\n</li>\n<li><p>尾随闭包是一个写在函数括号之后的闭包表达式，函数支持它作为最后一个参数调用</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个普通的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">oneFunction</span><span class=\"params\">( closure:<span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Void</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不用尾随闭包调用</span></span><br><span class=\"line\">oneFunction &#123; () -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 闭包内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用尾随闭包调用</span></span><br><span class=\"line\">oneFunction()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>上面关于排序的闭包也写简写</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>（）&#123; $<span class=\"number\">1</span> &gt; $<span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果函数只需要一个闭包作为参数，尾随闭包可以省略括号</p>\n</li>\n<li><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversed = names.<span class=\"built_in\">sort</span>&#123; $<span class=\"number\">1</span> &gt; $<span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Array有个map(_:)方法，只接受一个闭包作为参数，该方法会返回一个新的数组，数组中的元素与原数组一一映射</p>\n</li>\n<li><p>下面通过该方法，使用尾随闭包，讲Int类型数组[16,58,510]转换为对应的String类型的数组[“OneSix”,”FiveEight”,”FiveOneZero”]<br>-</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> digitNames = [</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"Zero\"</span>, <span class=\"number\">1</span>: <span class=\"string\">\"One\"</span>, <span class=\"number\">2</span>: <span class=\"string\">\"Two\"</span>,   <span class=\"number\">3</span>: <span class=\"string\">\"Three\"</span>, <span class=\"number\">4</span>: <span class=\"string\">\"Four\"</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>: <span class=\"string\">\"Five\"</span>, <span class=\"number\">6</span>: <span class=\"string\">\"Six\"</span>, <span class=\"number\">7</span>: <span class=\"string\">\"Seven\"</span>, <span class=\"number\">8</span>: <span class=\"string\">\"Eight\"</span>, <span class=\"number\">9</span>: <span class=\"string\">\"Nine\"</span></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">16</span>, <span class=\"number\">58</span>, <span class=\"number\">510</span>]</span><br><span class=\"line\"><span class=\"comment\">//  目标字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings = numbers.<span class=\"built_in\">map</span> &#123; (<span class=\"keyword\">var</span> number) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> number &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        output = digitNames[number % <span class=\"number\">10</span>]! + output</span><br><span class=\"line\">        number /= <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述过程，闭包参数number被声明为一个可变参数，因此可以在闭包函数体中修改。</p>\n</li>\n<li><p>闭包表达式指定了返回类型为String</p>\n</li>\n<li><p>闭包表达式每次被调用时，创建一个Output的字符串并且返回</p>\n</li>\n<li><p>从digitNames字典中取出的字符串被拼接早output的前段，逆序简历了一个字符串版本的数字</p>\n</li>\n<li><p>当number /= 10 为0时，out字符串被返回</p>\n</li>\n<li><p>map方法讲字符串添加到所映射的数组中</p>\n</li>\n<li><p>尾随闭包让代码变得更优雅</p>\n</li>\n</ul>\n<hr>\n<p>##3.捕获值</p>\n<ul>\n<li>闭包在其对应的上下文中捕获常量或者变量，即使被捕获的常量或者变量作用域已经不在，闭包仍然可以正确地引用和修改这些值。</li>\n</ul>\n<ul>\n<li>嵌套函数是最简单的可以捕获值的闭包，捕获范围是其外部函数范围</li>\n</ul>\n<p>下面举个例子来说明：</p>\n<ul>\n<li><p>makeIncrementor函数包含一个incrementor的嵌套函数，incrementor从上下文中捕获了两个值，一个amount，一个runningTotal</p>\n</li>\n<li><p>成功捕获该值后，makeIncrementor将incrementor作为闭包返回</p>\n</li>\n<li><p>每次调用incrementor时，runningTotal会增加amount</p>\n</li>\n<li><p>makeIncrementor函数的返回值是一个无参数返回值为Int的函数,() -&gt;Int</p>\n</li>\n<li><p>makeIncrementor有一个runningTotal的初始值，该值通过incrementor函数返回</p>\n</li>\n<li><p>makeIncrementor函数有个Int类型的参数，其外部参数为forIncrement，内部参数为amount</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementor</span><span class=\"params\">(forIncrement amount: Int)</span></span> -&gt; () -&gt;<span class=\"type\">Int</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> runningTotal = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span>  <span class=\"title\">incrementor</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        runningTotal += amount</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> runningTotal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incrementor</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>incrementor函数没用参数，但是捕获了amount，runningTotal两个参数，并且可以进行正确的修改</p>\n</li>\n<li><p>注意：</p>\n<ul>\n<li>当一个值步变的时候，Swift可能会改为捕获并且保存一份对值的拷贝</li>\n<li>Swift会自我管理捕获变量的内存</li>\n</ul>\n</li>\n<li><p>下面，来调用上面的函数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> run = makeIncrementor(forIncrement: <span class=\"number\">5</span>)</span><br><span class=\"line\">run() <span class=\"comment\">// 5</span></span><br><span class=\"line\">run() <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> run2 = makeIncrementor(forIncrement: <span class=\"number\">7</span>)</span><br><span class=\"line\">run2() <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">run() <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当创建incrementor时，会得到了个独立全新的变量，因此上述run1,run互不干扰</p>\n</li>\n</ul>\n<hr>\n<p>##4.闭包是引用类型</p>\n<ul>\n<li><p>上面的例子，run,run1都是常量，但是这些常量指向的闭包依然可以增加其捕获变量的值，因为闭包是引用类型</p>\n</li>\n<li><p>将一个函数或者闭包赋值给一个常量或者变量，实际都是讲常量或者变量的值设置为对应函数或者闭包的引用</p>\n</li>\n<li><p>将闭包赋值给两个不同的变量或者常量，两个值都会指向一个闭包</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> run3 = run</span><br><span class=\"line\">run3() <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<p>##5.非逃逸闭包</p>\n<p>####5.1什么是非逃逸闭包</p>\n<ul>\n<li><p>当一个闭包作为参数传递给函数时，如果闭包在函数返回之后才执行，则成这样的闭包从函数中逃逸</p>\n</li>\n<li><p>当定义接受闭包作为参数的函数时，可以在参数前面添加@noescape，用来表示该闭包是不可以逃逸的</p>\n</li>\n<li><p>闭包标注@noescape后，闭包只能在函数体中执行，不能脱离函数体</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非逃逸闭包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(@noescape closure: <span class=\"params\">()</span></span></span>-&gt;<span class=\"type\">Void</span>)&#123;</span><br><span class=\"line\">    closure()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sort方法就可以用非逃逸闭包，因为它在排序完成的时候，就已经没用了</p>\n</li>\n<li>常用的闭包往往都是逃逸的，比如网络异步请求后，我们获得返回数据使用，这些闭包要脱离函数体使用</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"iOS10适配","url":"http://www.antjustgo.com/2016/08/11/iOS10适配的小资料/","content":"<p>iOS10相册相机闪退bug<br><a href=\"http://www.jianshu.com/p/5085430b029f\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/5085430b029f</a></p>\n<p>iOS 10 因苹果健康导致闪退 crash<br><a href=\"http://www.jianshu.com/p/545bd1bf5a23\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/545bd1bf5a23</a></p>\n<p>麦克风、多媒体、地图、通讯录<br>ios10相机等崩溃<br><a href=\"http://www.jianshu.com/p/ec15dadd38f3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/ec15dadd38f3</a></p>\n<p>iOS10 配置须知<br><a href=\"http://www.jianshu.com/p/65f21dc5c556\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/65f21dc5c556</a></p>\n<p>iOS开发 适配iOS10以及Xcode8<br><a href=\"http://www.jianshu.com/p/9756992a35ca\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/9756992a35ca</a></p>\n<p>iOS 10 的适配问题<br><a href=\"http://www.jianshu.com/p/f8151d556930\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/f8151d556930</a></p>\n","categories":[],"tags":["iOS"]},{"title":"Swift-存储属性与计算属性","url":"http://www.antjustgo.com/2016/08/11/Swift-存储属性与计算属性/","content":"<ul>\n<li>属性是将值跟特定的类、结构体或者枚举关联。存储属性存储常量或者变量作为实例的一部分，用于类和结构体；计算属性是用来计算一个值，可以用在类、结构体和枚举。</li>\n<li>存储属性和计算属性通常与特定的类型的实例关联。但是，属性也可以直接作用于类型本身，这样的属性成为类型属性。</li>\n<li>Swift可以定义属性观察器来监控属性值的改变，属性观察期可以添加到自己定义的存储属性上，也可以添加到父类继承的属性上</li>\n</ul>\n<p>##1.存储属性</p>\n<ul>\n<li>存储属性就是存储在特定类、结构体里的一个常量或者变量。</li>\n<li>可以在定义存储属性的时候指定默认值。</li>\n<li>可以在构造过程中设置或者修改存储属性的值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个结构体如下，FixedLengthRange代表一个创建后无法改变的区间</span><br><span class=\"line\">struct FixedLengthRange &#123;</span><br><span class=\"line\">    var firstValue: Int</span><br><span class=\"line\">    let lenght: Int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var rangeOfThreeItens = FixedLengthRange(firstValue: 0, lenght: 3)</span><br><span class=\"line\"></span><br><span class=\"line\">// rangeOfThreeItens 实例包括了名为firstValue的变量存储属性和lenght的常量存储属性</span><br><span class=\"line\">// 其中lenght在创建后无法被修改</span><br><span class=\"line\"></span><br><span class=\"line\">rangeOfThreeItens.firstValue = 7;</span><br><span class=\"line\"></span><br><span class=\"line\">// rangeOfThreeItens 现在的表示7 8 9的区间</span><br></pre></td></tr></table></figure>\n<p>####1.1 常量结构体的存储属性</p>\n<ul>\n<li>当创建了一个结构体的实例并赋值一个常量，那么无法修改该实例的任何属性。</li>\n<li>结构体是值类型，当值类型的实例被声明为常量的时候，它的所有属性都变成了常量。<br>当尝试下面的修改时，就会报错<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rangeOfThreeItens = <span class=\"type\">FixedLengthRange</span>(firstValue: <span class=\"number\">0</span>, lenght: <span class=\"number\">3</span>)</span><br><span class=\"line\">rangeOfThreeItens.firstValue = <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>####1.2延迟存储属性</p>\n<ul>\n<li>延迟存储属性是指第一次被调用的时候才会计算其初始值的属性，就是常说的懒加载。</li>\n<li>Swift在属性前加lazy关键字来标记一个延迟存储属性，延迟存储属性必须用变量（var关键字）。</li>\n<li>当属性依赖其他外部因素影响（如构造过程，初始值复杂，大量计算），适合用延迟属性。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// DataImporter是一个导入数据的类，导入过程会消耗大量的时间</span><br><span class=\"line\">class DataImporter &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var fileName = &quot;data.text&quot;</span><br><span class=\"line\">    /** 导入数据 **/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// DataManager用来管理和提供对这个字符串数组的访问</span><br><span class=\"line\"></span><br><span class=\"line\">class DataManager &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    lazy var importer = DataImporter()</span><br><span class=\"line\">    var data = [String]()</span><br><span class=\"line\">    /** 管理数据 **/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let manager = DataManager()</span><br><span class=\"line\"></span><br><span class=\"line\">manager.data.append(&quot;someData&quot;)</span><br><span class=\"line\">manager.data.append(&quot;someMore&quot;)</span><br></pre></td></tr></table></figure>\n<p>简单描述了一个DataManager类，导入文件的过程。DataManager用来管理数据的导入，依赖与DataImporter的功能。导入数据消耗太多的时间，而且DataManager也可能不导入数据就完成了管理数据的过程。DataImporter不需要立刻创建，只有在使用的时候才去创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(manager.importer.fileName)</span><br></pre></td></tr></table></figure>\n<p>只有执行上述代码的时候，DataImporter实例才会被创建。</p>\n<p>####1.3存储属性和实例变量</p>\n<ul>\n<li>OC中，提供了为类实例存储值和引用提供了两种方法，通过_XXXXX或者self.XXXXX.</li>\n<li>Swift统一了OC的方法，属性没有对应的实例变量（_XXXXX)</li>\n<li>一个类型中属性的全部信息–命名、类型、内存管理特性，全部都在唯一的地方（类型定义中）</li>\n</ul>\n<p>##2.计算属性</p>\n<ul>\n<li>枚举、类、结构体除了拥有存储属性，还可以定义计算属性。</li>\n<li>计算属性不直接存储值，而是提供一个getter和一个可选的setter来间接获取、设置其他属性和变量的值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下面定义三个结构体，来描述一个矩形</span><br><span class=\"line\">struct Point &#123;</span><br><span class=\"line\">    var x = 0.0, y = 0.0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Size &#123;</span><br><span class=\"line\">    var width = 0.0, height = 0.0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Rect &#123;</span><br><span class=\"line\">    var origin = Point()</span><br><span class=\"line\">    var size = Size()</span><br><span class=\"line\">    var center: Point&#123;</span><br><span class=\"line\">        get&#123;</span><br><span class=\"line\">            let centerX = origin.x + (size.width * 0.5)</span><br><span class=\"line\">            let centerY = origin.y + (size.height * 0.5)</span><br><span class=\"line\">            return Point(x: centerX, y: centerY)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set(newCenter)&#123;</span><br><span class=\"line\">            origin.x = newCenter.x - (size.width * 0.5)</span><br><span class=\"line\">            origin.y = newCenter.y - (size.height * 0.5)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 创建一个矩形</span><br><span class=\"line\">var square = Rect(origin: Point(x: 0.0, y: 0.0), size: Size(width: 10.0, height: 10.0))</span><br><span class=\"line\">// 重新设置矩形的中心点</span><br><span class=\"line\">let initialSquareCenter = square.center;</span><br><span class=\"line\">square.center = Point(x: 20.0, y: 20.0)</span><br></pre></td></tr></table></figure>\n<p>####2.1便捷setter声明</p>\n<ul>\n<li>如果计算属性的setter没有定义表示新值的参数名，则可以用默认值newValue,上述代码可以改写</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">struct Rect &#123;</span><br><span class=\"line\">    var origin = Point()</span><br><span class=\"line\">    var size = Size()</span><br><span class=\"line\">    var center: Point&#123;</span><br><span class=\"line\">        get&#123;</span><br><span class=\"line\">            let centerX = origin.x + (size.width * 0.5)</span><br><span class=\"line\">            let centerY = origin.y + (size.height * 0.5)</span><br><span class=\"line\">            return Point(x: centerX, y: centerY)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&#123;</span><br><span class=\"line\">            origin.x = newValue.x - (size.width * 0.5)</span><br><span class=\"line\">            origin.y = newValue.y - (size.height * 0.5)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####2.2只读计算属性</p>\n<ul>\n<li>只有getter没有setter的计算属性</li>\n<li>只读计算属性总是返回一个值，可以通过点语法访问，但是不能设置</li>\n<li>只读计算属性可以省略get和花括号</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 一个结构体 ，volume计算体积</span><br><span class=\"line\">struct Cuboid&#123;</span><br><span class=\"line\">    var width = 0.0, height = 0.0, depth = 0.0</span><br><span class=\"line\">    var volume: Double&#123;</span><br><span class=\"line\">        return width * height * depth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let newCuboid = Cuboid(width: 3.0, height: 4.0, depth: 5.0)</span><br></pre></td></tr></table></figure>\n<p>##3.属性观察器</p>\n<ul>\n<li>属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用。</li>\n<li>延迟属性不可以设置属性观察器</li>\n<li>可以通过重写属性的方式为继承的属性添加观察器<ul>\n<li>willSet : 在新的值被设置之前调用 </li>\n<li>didSet : 在新的值被设置之后调用</li>\n<li>父类的属性在子类的构造器被赋值时，观察器同样会被触发</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// StepCounter是一个计步器</span><br><span class=\"line\">class StepCounter&#123;</span><br><span class=\"line\">    var totalStep: Int = 0&#123;</span><br><span class=\"line\">        willSet(newTotalSteps)&#123;</span><br><span class=\"line\">            print(&quot;现在总步数是\\(newTotalSteps)步&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        didSet&#123;</span><br><span class=\"line\">            if totalStep &gt; oldValue&#123;</span><br><span class=\"line\">                print(&quot;增加了\\(totalStep - oldValue)步&quot;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let stepCounter = StepCounter()</span><br><span class=\"line\">stepCounter.totalStep = 200;</span><br><span class=\"line\">// 现在总步数是200,增加了200步</span><br><span class=\"line\">stepCounter.totalStep = 500;</span><br><span class=\"line\">// 现在总步数是500,增加了300步</span><br></pre></td></tr></table></figure>\n<p>##4.全局变量和局部变量<br>全局变量是在函数、方法、闭包或者其他类型之外定义的变量。局部变量是在函数、方法、或者闭包内定义的。</p>\n<ul>\n<li>计算属性和属性观察器所描述的模式也可以用于全局变量和局部变量。</li>\n<li>默认的全局和局部变量都是存储型变量，跟存储属性类似，它提供存储空间，并且允许读取和写入</li>\n<li>全局和局部变量都可以定义计算属性和添加属性观察器。</li>\n<li>注意！！<ul>\n<li>全局的常量或者变量都是延迟计算的，跟延迟存储属性不同的地方在于，全局的常量或者变量不需要标记lazy。</li>\n<li>局部范围的常量或者变量不会延迟计算。</li>\n</ul>\n</li>\n</ul>\n<p>##5.类型属性<br>实例的属性属于一个特定的实例，实例之间的属性相互独立，也可以为类型本身设置属性，不管类有多少的实例，这些属性只有唯一一份，这个就是类型属性。</p>\n<ul>\n<li>类型属性，比如所有实例都有一个常量（类似C语言的静态常量），或者拥有一个变量（类似C语言的动态变量）。</li>\n<li>值类型的存储类型属性可以是变量或者常量，计算型属性跟计算属性一样只能定义成常量属性。</li>\n<li>注意！！<ul>\n<li>必须给存储型类型属性，指定一个默认值，因为类型本身，无法在初始化过程中，使用构造器给类型属性赋值、</li>\n<li>存储型类型属性是延迟初始化的，并且不要加lazy,多线程同时访问也只会初始化一次。</li>\n</ul>\n</li>\n</ul>\n<p>####5.1类型属性语法<br>在Swift中，类型属性是类型定义的一部分，写在类型最外层花括号内，作用域就是在该类型支持的范围内。</p>\n<ul>\n<li>用关键字static来定义类型属性</li>\n<li>在类中，用关键字class来支持子类对父类的实现进行重写。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 只写了只读计算型类型属性</span><br><span class=\"line\">struct MyStruct&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static var storedTypeProperty = &quot;Some Value&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static var comutedTypeProperty : Int&#123;</span><br><span class=\"line\">        return 998</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">enum MyEnum&#123;</span><br><span class=\"line\">    static var storedTypeProperty = &quot;Some Value&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static var comutedTypeProperty : Int&#123;</span><br><span class=\"line\">        return 998</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">    static var storedTypeProperty = &quot;Some Value&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static var comutedTypeProperty : Int&#123;</span><br><span class=\"line\">        return 998</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class var overridedableComutedTypeProperty : Int&#123;</span><br><span class=\"line\">        return 100</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####5.2获取和设置类型属性的值<br>跟实例的属性一样，类型属性可以用点语法来访问，只是不需要通过实例。</p>\n","categories":[],"tags":["Swift"]},{"title":"Swift-如何从一个字符串创建一个类","url":"http://www.antjustgo.com/2016/05/30/Swift-如何从一个字符串创建一个类/","content":"<ul>\n<li><p>OC中,我们可以通过下面的方法轻松创建一个类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> NSClassFromString(&lt;#NSString * _Nonnull aClassName#&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Swift,调用这个方法后,创建的类却一直为空,WTF!正确的姿势是,要先获得命名空间,拼接”命名空间”+”.”+”对应的字符串”.</p>\n<ul>\n<li><p>1.在Swift中, 如果想通过字符串创建一个类, 那么必须加上命名空间, 类型是可选类型,所以要解包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nameSpace = NSBundle.mainBundle().infoDictionary![&quot;CFBundleExecutable&quot;]</span><br><span class=\"line\"> guard let ns = nameSpace as? String else&#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.动态获取的命名空间是不包含”.”的, 所以需要我们自己手动拼接, 类型依然是可以选的.将AnyClass类型转换为你想要创建的类型,这里用UIViewController做例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myClass: AnyClass? = NSClassFromString(ns + &quot;.&quot; + &quot;对应的字符串&quot;)</span><br><span class=\"line\">  guard let myClassType = myClass as? UIViewController.Type else&#123;</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>这样就完成了根据字符串,自定义创建一个类了myClassType,就是我们要的类,可以拿来实例化了.</p>\n</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"Swift-类型安全和类型推断","url":"http://www.antjustgo.com/2016/05/29/Swift-类型安全和类型推断/","content":"<ul>\n<li>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个String<br>，你绝对不可能不小心传进去一个Int<br>。</li>\n<li>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查（type checks），并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</li>\n<li>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用<em>类型推断</em>（type inference）来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查你赋的值即可。<br>因为有类型推断，和 C 或者 Objective-C 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</li>\n<li>当你声明常量或者变量并赋初值的时候类型推断非常有用。当你在声明常量或者变量的时候赋给它们一个字面量（literal value 或 literal）即可触发类型推断。（字面量就是会直接出现在你代码中的值，比如42<br>和3.14159<br>。）<br>例如，如果你给一个新常量赋值42<br>并且没有标明类型，Swift 可以推断出常量类型是Int<br>，因为你给它赋的初始值看起来像一个整数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let meaningOfLife = 42// meaningOfLife 会被推测为 Int 类型</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>同理，如果你没有给浮点字面量标明类型，Swift 会推断你想要的是Double<br>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let pi = 3.14159// pi 会被推测为 Double 类型</span><br></pre></td></tr></table></figure></p>\n<p>当推断浮点数的类型时，Swift 总是会选择Double<br>而不是Float<br>。<br>如果表达式中同时出现了整数和浮点数，会被推断为Double<br>类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let anotherPi = 3 + 0.14159// anotherPi 会被推测为 Double 类型</span><br></pre></td></tr></table></figure></p>\n<p>原始值3<br>没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为Double<br>类型。</p>\n","categories":[],"tags":["Swift"]},{"title":"Swift-让初始化代码更紧凑","url":"http://www.antjustgo.com/2016/05/29/Swift-让初始化代码更紧凑/","content":"<p>介绍两个特殊的swift风格的初始化方式,可以让初始化代码更紧凑,更清晰</p>\n<ul>\n<li><p>1.懒加载,闭包式写法</p>\n <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">fileprivate</span> <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> closeButton: <span class=\"type\">UIButton</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> btn = <span class=\"type\">UIButton</span>()</span><br><span class=\"line\">        btn.setBackgroundImage(<span class=\"type\">UIImage</span>(named: <span class=\"string\">\"compose_photo_close\"</span>), <span class=\"keyword\">for</span>: <span class=\"type\">UIControlState</span>.normal)</span><br><span class=\"line\">        btn.isHidden = <span class=\"literal\">true</span></span><br><span class=\"line\">        btn.isUserInteractionEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">        btn.sizeToFit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> btn</span><br><span class=\"line\">    &#125;()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.位置参数来初始化 </p>\n  <figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> mySwitch : <span class=\"type\">UISwitch</span> = &#123;</span><br><span class=\"line\">        view.addSubview($<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"type\">CenterViewInSuperview</span>($<span class=\"number\">0</span>, horizontal: <span class=\"literal\">true</span>, vertical: <span class=\"literal\">true</span>)</span><br><span class=\"line\">        $<span class=\"number\">0</span>.addTarget(<span class=\"keyword\">self</span>, action: <span class=\"string\">\"action\"</span>, forControlEvents: .<span class=\"type\">TouchUpInside</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;(<span class=\"type\">UISwitch</span>())</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"Swift-可选类型optionals--try!-try-try","url":"http://www.antjustgo.com/2016/05/11/Swift-可选类型optionals--try!-try-try/","content":"<ul>\n<li><p>“C 和 Objective-C 中并没有可选类型这个概念。最接近的是 Objective-C 中的一个特性，一个方法要不返回一个对象要不返回nil，nil表示“缺少一个合法的对象”。然而，这只对对象起作用——对于结构体，基本的 C 类型或者枚举类型不起作用。对于这些类型，Objective-C 方法一般会返回一个特殊值（比如NSNotFound）来暗示值缺失。这种方法假设方法的调用者知道并记得对特殊值进行判断。然而，Swift 的可选类型可以让你暗示任意类型的值缺失，并不需要一个特殊值。”“</p>\n</li>\n<li><p>下面的例子使用这种构造器来尝试将一个String转换成Int：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let possibleNumber = &quot;123&quot;</span><br><span class=\"line\">let convertedNumber = Int(possibleNumber)</span><br><span class=\"line\">// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>因为该构造器可能会失败，所以它返回一个可选类型（optional）Int，而不是一个Int。一个可选的Int被写作Int?而不是Int。问号暗示包含的值是可选类型，也就是说可能包含Int值也可能不包含值。（不能包含其他任何值比如Bool值或者String值。只能是Int或者什么都没有。）”</p>\n</li>\n<li><p>注意:  </p>\n<ul>\n<li>1.“nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。”</li>\n<li>2.“Swift 的nil和Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。在 Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为nil，不只是对象类型。”</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Swift"]},{"title":"cell展开功能的实现","url":"http://www.antjustgo.com/2016/04/19/cell展开功能的实现/","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1050644-1e9a3e4339cfcaec.gif?imageMogr2/auto-orient/strip\" alt=\"Untitled.gif\"></p>\n<ul>\n<li>仿写一个类似QQ分组的展开效果,分析下该效果的结构.根据点击了组的头部视图,判断是否要展开该组.可以理解为点击了每组的头部视图后,动态的改变了每个cell的高度.</li>\n<li>本代码这是为了实习小功能的Demo,并未对其进行很好的封装,只为举个例子.下面贴出代码进行分析</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 组数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> ,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSArray</span> *sectionArray;;</span><br><span class=\"line\"><span class=\"comment\">/** 行数据 */</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> ,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSArray</span> *rowArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> ,<span class=\"keyword\">weak</span>)   <span class=\"built_in\">UITableView</span> *tableView;</span><br><span class=\"line\"><span class=\"comment\">/** 判断cell是否展开 */</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> ,<span class=\"keyword\">strong</span>) <span class=\"built_in\">NSMutableDictionary</span> *showDic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span> ,<span class=\"keyword\">weak</span>) <span class=\"built_in\">UILabel</span> *header;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> loadDataSource];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span> setupTableView];  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)loadDataSource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.sectionArray = @[<span class=\"string\">@\"第一组\"</span>,<span class=\"string\">@\"第二组\"</span>,<span class=\"string\">@\"第三组\"</span>,<span class=\"string\">@\"第四组\"</span>,<span class=\"string\">@\"第五组\"</span>,<span class=\"string\">@\"第六组\"</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">self</span>.rowArray = @[<span class=\"string\">@\"张三\"</span>,<span class=\"string\">@\"李四\"</span>,<span class=\"string\">@\"王五\"</span>,<span class=\"string\">@\"赵六\"</span>,<span class=\"string\">@\"好友\"</span>,<span class=\"string\">@\"家人\"</span>,<span class=\"string\">@\"朋友\"</span>,<span class=\"string\">@\"同学\"</span>,<span class=\"string\">@\"陌生人\"</span>,<span class=\"string\">@\"黑名单\"</span>,<span class=\"string\">@\"好友\"</span>,<span class=\"string\">@\"家人\"</span>,<span class=\"string\">@\"朋友\"</span>,<span class=\"string\">@\"同学\"</span>,<span class=\"string\">@\"陌生人\"</span>,<span class=\"string\">@\"黑名单\"</span>,<span class=\"string\">@\"好友\"</span>,<span class=\"string\">@\"家人\"</span>,<span class=\"string\">@\"朋友\"</span>,<span class=\"string\">@\"同学\"</span>,<span class=\"string\">@\"陌生人\"</span>,<span class=\"string\">@\"黑名单\"</span>,<span class=\"string\">@\"好友\"</span>,<span class=\"string\">@\"家人\"</span>,<span class=\"string\">@\"朋友\"</span>,<span class=\"string\">@\"同学\"</span>,<span class=\"string\">@\"陌生人\"</span>,<span class=\"string\">@\"黑名单\"</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)setupTableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UITableView</span> *tableView = [[<span class=\"built_in\">UITableView</span> alloc]initWithFrame:<span class=\"keyword\">self</span>.view.bounds style:<span class=\"built_in\">UITableViewStylePlain</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.tableView = tableView;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.tableView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.tableView.dataSource = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView registerClass:[<span class=\"built_in\">UITableViewCell</span> <span class=\"keyword\">class</span>] forCellReuseIdentifier:cellID];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.tableView];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.tableView.tableFooterView = [[<span class=\"built_in\">UIView</span> alloc]init];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"built_in\">NSInteger</span>)numberOfSectionsInTableView:(<span class=\"built_in\">UITableView</span> *)tableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"keyword\">self</span>.sectionArray.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"built_in\">NSInteger</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"built_in\">NSInteger</span>)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.rowArray.count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"built_in\">UITableViewCell</span> *)tableView:(<span class=\"built_in\">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    <span class=\"built_in\">UITableViewCell</span> *cell=[tableView dequeueReusableCellWithIdentifier:cellID];</span><br><span class=\"line\">    <span class=\"comment\">// 剪掉超出部分</span></span><br><span class=\"line\">    cell.clipsToBounds = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">    cell.textLabel.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"第 %ld 行： %@\"</span>,indexPath.row,<span class=\"keyword\">self</span>.rowArray[indexPath.row]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>上面的代码初始化了一些基本数据,下面将为组头部视图,添加监听</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"built_in\">UIView</span>*)tableView:(<span class=\"built_in\">UITableView</span> *)tableView viewForHeaderInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UILabel</span> *header = [[<span class=\"built_in\">UILabel</span> alloc]init];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.header = header;</span><br><span class=\"line\">    </span><br><span class=\"line\">    header.userInteractionEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    header.text = <span class=\"keyword\">self</span>.sectionArray[section];</span><br><span class=\"line\">    header.userInteractionEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">    header.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</span><br><span class=\"line\">    header.tag = section;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">UITapGestureRecognizer</span> *singleRecognizer = [[<span class=\"built_in\">UITapGestureRecognizer</span> alloc] initWithTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(SingleTap:)];</span><br><span class=\"line\">    [header addGestureRecognizer:singleRecognizer];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)SingleTap:(<span class=\"built_in\">UITapGestureRecognizer</span>*)recognizer&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 拿到当前的label</span></span><br><span class=\"line\">    <span class=\"built_in\">NSInteger</span> didSection = recognizer.view.tag;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.showDic) &#123; <span class=\"comment\">// 展开字典创建</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.showDic = [[<span class=\"built_in\">NSMutableDictionary</span> alloc]init] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拿lable的tag作为字典的key</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>,recognizer.view.tag];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (![<span class=\"keyword\">self</span>.showDic objectForKey:key]) &#123;  <span class=\"comment\">//如果当前字典没有对应的值</span></span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.showDic setObject:<span class=\"string\">@\"isOn\"</span> forKey:key]; <span class=\"comment\">// 就把当前的key对应的值存起来</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">// 如果展开了</span></span><br><span class=\"line\">        [<span class=\"keyword\">self</span>.showDic removeObjectForKey:key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.tableView reloadSections:[<span class=\"built_in\">NSIndexSet</span> indexSetWithIndex:didSection] withRowAnimation:<span class=\"built_in\">UITableViewRowAnimationNone</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述代码实现了,组头部视图正常现实和监听组头部视图的点击,添加了点击手势,只剩下最后一步了,就是动态设置cell的高度</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span>.showDic objectForKey:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>,indexPath.section]]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">44</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.01</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForHeaderInSection:(<span class=\"built_in\">NSInteger</span>)section&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">35</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码就是这个效果的核心了,为了现实分割线的效果特地设置Cell不展开时候的高度为0.01,就可以看出明显的分割线了</li>\n<li>注意点:<ul>\n<li>cell.clipsToBounds = YES; 这行代码包装了cell高度为0.01时,文字堆在一期的难看效果.</li>\n<li>UITableViewRowAnimationNone 是默认的没有动画的参数,可以设置其他的动画参数,是刷新列表时候的动画<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">NS_ENUM</span>(<span class=\"built_in\">NSInteger</span>, <span class=\"built_in\">UITableViewRowAnimation</span>) &#123;</span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationFade</span>,   <span class=\"comment\">//淡入淡出</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationRight</span>,  <span class=\"comment\">//从右滑入         // slide in from right (or out to right)</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationLeft</span>,   <span class=\"comment\">//从左滑入</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationTop</span>,     <span class=\"comment\">//从上滑入</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationBottom</span>,  <span class=\"comment\">//从下滑入</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationNone</span>,            <span class=\"comment\">// available in iOS 3.0</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationMiddle</span>,          <span class=\"comment\">// available in iOS 3.2.  attempts to keep cell centered in the space it will/did occupy</span></span><br><span class=\"line\"><span class=\"built_in\">UITableViewRowAnimationAutomatic</span> = <span class=\"number\">100</span>  <span class=\"comment\">// available in iOS 5.0.  chooses an appropriate animation style for you</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["iOS"]},{"title":"GCD在Swift3-0的改变","url":"http://www.antjustgo.com/2016/03/11/GCD在Swift3-0的改变/","content":"<ul>\n<li>在iOS中,苹果提供了两种方式进行多任务编程：Grand Central Dispatch (GCD) 和 NSOperationQueue。本文主要介绍GCD在Swift3.0的改变,无论那种方式实现多线程,都是为了不堵塞主线程,高效的利用CPU,以便于任何操作都不能堵塞主线程，必须使其用于界面响应以及用户交互。</li>\n<li>Swift3.0重新写GCD语法和风格,在介绍新GCD前,先了解两个重要的概念.<ul>\n<li>1.队列( dispatch queue):<br> 一个队列实际上就是一系列的代码块，这些代码可以在主线程或后台线程中以同步或者异步的方式执行。一旦队列创建完成，操作系统就接管了这个队列，并将其分配到任意一个核心中进行处理。不管有多少个队列，它们都能被系统正确地管理，这些都不需要开发者进行手动管理。队列遵循 FIFO 模式（先进先出），这意味着先进队列的任务会先被执行（比如上厕所的时候,排队,里面的人上完,下一个人才能继续）。</li>\n<li>2.任务项(WorkItem):<br>一个任务项就是一个代码块，它可以随同队列的创建一起被创建，也可以被封装起来，然后在之后的代码中进行复用。正如你所想，任务项的代码就是 dispatch queue 将会执行的代码。队列中的任务项也是遵循 FIFO 模式。这些执行可以是同步的，也可以是异步的。对于同步的情况下，应用会一直堵塞当前线程，直到这段代码执行完成。而当异步执行的时候，应用先执行任务项，不等待执行结束，立即返回。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-重新认识-Dispatch-Queue\"><a href=\"#1-重新认识-Dispatch-Queue\" class=\"headerlink\" title=\"1.重新认识 Dispatch Queue\"></a>1.重新认识 Dispatch Queue</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let queue = DispatchQueue(label: &quot;myQueue&quot;)</span><br></pre></td></tr></table></figure>\n<p>同步和异步执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   queue.sync &#123;</span><br><span class=\"line\">print(&quot;同步执行&quot;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">print(&quot;异步执行&quot;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>#2.Quality Of Service（QoS）和优先级</p>\n<ul>\n<li>用于指定任务重要程度以及优先级的信息，在 GCD 中被称为 Quality of Service（QoS）</li>\n</ul>\n<ul>\n<li>userInteractive</li>\n<li>userInitiated</li>\n<li>default</li>\n<li>utility</li>\n<li>background</li>\n<li>unspecified</li>\n</ul>\n<p>优先级,通过下面方法的qos参数设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let queue1 = DispatchQueue(label: &quot;queue1&quot;, qos: DispatchQoS.background)</span><br></pre></td></tr></table></figure></p>\n<p>#3.串行与并行</p>\n<ul>\n<li>默认情况下,任务在一个队列中都是串行进行的,有时候我们需要并行队列,则通过设置attributes参数来实现,当这个参数被指定为 concurrent<br>时，该特定队列中的所有任务都会被同时执行。如果没有指定这个参数，则队列会被设置为串行队列。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let queue2 = DispatchQueue(label: &quot;queue2&quot;, qos: .utility, attributes: .concurrent)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意:attributes也可以接受另一个名为 initiallyInactive<br>的值。如果使用这个值，任务不会被自动执行，而是需要开发者手动去触发。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var inactiveQueue: DispatchQueue!</span><br><span class=\"line\"></span><br><span class=\"line\">现在，初始化队列，并将其赋值给 inactiveQueue</span><br><span class=\"line\">：</span><br><span class=\"line\">let queue3 = DispatchQueue(label: &quot;queue3&quot;, qos: .utility, attributes: .initiallyInactive)inactiveQueue = anotherQueue</span><br><span class=\"line\"></span><br><span class=\"line\">使用成员属性是有必要的，因为 anotherQueue</span><br><span class=\"line\"> 是在 concurrentQueues()</span><br><span class=\"line\"></span><br><span class=\"line\">if let queue = inactiveQueue &#123; </span><br><span class=\"line\">   queue.activate()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但是代码依然是串行进行的,如果还要并行执行任务,可以指定attributes参数接受一个数组: [.concurrent, .initiallyInactive]</li>\n</ul>\n<p>#4.延时执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let queue4 = DispatchQueue(label: &quot;queue4&quot;, qos: .userInitiated)</span><br><span class=\"line\">print(Date())</span><br><span class=\"line\">let additionalTime: DispatchTimeInterval = .seconds(2)</span><br><span class=\"line\">delayQueue.asyncAfter(deadline: .now() + 0.75) &#123; </span><br><span class=\"line\">print(Date())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#5.访问主队列和全局队列</p>\n<ul>\n<li>和之前的GCD写法类型,Swift3.0依然提供了快速访问队列的方式.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalQueue = DispatchQueue.global()</span><br><span class=\"line\">  globalQueue.async &#123;        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>全局队列依然可以设置优先级,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let globalQueue = DispatchQueue.global(qos: .userInitiated)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>最常用的就是更新UI的操作,都要回到主队列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DispatchQueue.main.async &#123; </span><br><span class=\"line\">// Do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#6.DispatchWorkItem 对象<br>DispatchWorkItem简单的来描述就是一个代码块可以在任意一个队列上被调用.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let workItem = DispatchWorkItem &#123; </span><br><span class=\"line\">// Do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在全局队列上调用代码块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let queue = DispatchQueue.global()queue.async &#123; </span><br><span class=\"line\">   workItem.perform()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DispatchQueue 类为此目的提供了一个便利的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue.async(execute: workItem)</span><br></pre></td></tr></table></figure>\n<p>当任务执行完毕的时候,可以通知主队列<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workItem.notify(queue: DispatchQueue.main) &#123; </span><br><span class=\"line\">print(&quot;value = &quot;, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Swift3.0 GCD的写法变了很多,更加的间接和清晰了.</p>\n","categories":[],"tags":["Swift"]},{"title":"SDWebImage内部实现过程","url":"http://www.antjustgo.com/2016/02/11/SDWebImage内部实现过程/","content":"<ol>\n<li>入口 setImageWithURL:placeholderImage:options:<br>会先把 placeholderImage 显示，然后 SDWebImageManager 根据 URL 开始处理图片。</li>\n<li>进入 SDWebImageManager-downloadWithURL:delegate:options:userInfo:，交给 SDImageCache 从缓存查找图片是否已经下载 queryDiskCacheForKey:delegate:userInfo:.</li>\n<li>先从内存图片缓存查找是否有图片，如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。</li>\n<li>SDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。</li>\n<li>如果内存缓存中没有，生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存。</li>\n<li>根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。</li>\n<li>如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中(如果空闲内存过小会先清空内存缓存).SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:进而回调展示图片。</li>\n<li>如果从硬盘缓存目录读取不到图片,说明所有缓存都不存在该图片，需要下载图片,回调 imageCache:didNotFindImageForKey:userInfo:。</li>\n<li>共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。</li>\n<li>图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。</li>\n<li>connection:didReceiveData: 中利用 ImageIO 做了按图片下载进度加载效果。</li>\n<li>connectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。</li>\n<li>图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。</li>\n<li>在主线程 notifyDelegateOnMainThreadWithInfo: 宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo: 回调给 SDWebImageDownloader。</li>\n<li>imageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。</li>\n<li>通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。</li>\n<li>将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。</li>\n<li>SDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片。</li>\n<li>SDWI 也提供了 UIButton+WebCache 和 MKAnnotationView+WebCache，方便使用。</li>\n<li>SDWebImagePrefetcher 可以预先下载图片，方便后续使用。</li>\n</ol>\n","categories":[],"tags":["iOS"]},{"title":"about","url":"http://www.antjustgo.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://www.antjustgo.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://www.antjustgo.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://www.antjustgo.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://www.antjustgo.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://www.antjustgo.com/tag/index.html","content":"","categories":[],"tags":[]}]